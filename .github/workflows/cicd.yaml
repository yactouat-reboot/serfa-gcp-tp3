name: cicd

on:
  push:
    branches: [main, feat/tickets-list]

jobs:

  # Continuous Integration,
  # integration tests will use a dockerized database
  local-integration-tests:
    # GitHub runner has Docker installed
    runs-on: ubuntu-latest
    steps:
    - name: actions/checkout@v4
      uses: actions/checkout@v4
    - name: run tests
      run: |
        touch .env
        echo "DB_HOST=postgres" >> .env
        echo "DB_NAME=postgres" >> .env
        echo "DB_PASSWORD=postgres" >> .env
        echo "DB_PORT=5432" >> .env
        echo "DB_USERNAME=postgres" >> .env
        docker compose  -f tests.docker-compose.yml up --build --force-recreate -d 
        docker compose exec frontend bash -c "composer install && /var/www/html/vendor/bin/phpunit tests/HomepageIntegrationTest.php --colors && /var/www/html/vendor/bin/phpunit tests/ApiTicketsIntegrationTest.php --colors"

  # in this job, we will install/update dependencies and change global environment
  remote-sys-deps:
    name: remote-sys-deps
    needs: local-integration-tests
    runs-on: ubuntu-latest
    steps:
    - name: actions/checkout@v4
      uses: actions/checkout@v4 
    - name: copy-apache-conf
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIV_KEY }}
        port: 22
        source: "conf/apache.conf"
        target: /home/${{ secrets.SSH_USERNAME }}
    # you can have a glance at all the available actions in https://github.com/marketplace?type=actions
    - name: sysadmin ops on GCP VM
      uses: appleboy/ssh-action@v1.0.1
      env:
        DEBIAN_FRONTEND: "noninteractive"
      with:
        # should be the IP address of your VM
        host: ${{ secrets.SSH_HOST }}
        # should be the SSH key that you used to connect to the VM
        key: ${{ secrets.SSH_PRIV_KEY }}
        port: 22
        username: ${{ secrets.SSH_USERNAME }}
        # stops the rest of the script if an error is encountered
        script_stop: true
        # all the commands you see after the `|` will be executed in the remote machine
        envs: DEBIAN_FRONTEND
        script: |
          echo "updating system"
          sudo apt-get update && sudo apt-get upgrade -y
          sudo apt-get install -y git libpq-dev php php-pgsql php-mbstring php-xml zip
          echo "installing apache"
          cd /etc/apache2/sites-available
          sudo cp ~/conf/apache.conf /etc/apache2/sites-available/000-default.conf
          sudo rm -rf ./conf
          sudo a2enmod rewrite
          sudo a2enmod headers
          sudo systemctl restart apache2
          echo "installing composer"
          cd ~
          php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
          php composer-setup.php
          php -r "unlink('composer-setup.php');"
          sudo mv composer.phar /usr/local/bin/composer

  update-remote-application:
    name: update-remote-application
    needs: remote-sys-deps
    runs-on: ubuntu-latest
    steps:
      # we checkout the repo
      # this does `git clone git:myrepo.git && cd myrepo`
      - name: actions/checkout@v4
        uses: actions/checkout@v4 
    # we copy inside /var/www/html the content of the repo
      - name: copy-frontend
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIV_KEY }}
          port: 22
          source: "*"
          target: /var/www/html
      - name: env-and-composer
        uses: appleboy/ssh-action@v1.0.1
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          HOST: ${{ secrets.HOST }}
        with:
          # should be the IP address of your VM
          host: ${{ secrets.SSH_HOST }}
          # should be the SSH key that you used to connect to the VM
          key: ${{ secrets.SSH_PRIV_KEY }}
          port: 22
          username: ${{ secrets.SSH_USERNAME }}
          # stops the rest of the script if an error is encountered
          script_stop: true
          envs: DB_HOST,DB_NAME,DB_PASSWORD,DB_PORT,DB_USERNAME,HOST
          # all the commands you see after the `|` will be executed in the remote machine
          script: |
            cd /var/www/html
            touch .env
            > .env 
            echo "DB_HOST=$DB_HOST" >> .env
            echo "DB_NAME=$DB_NAME" >> .env
            echo "DB_PASSWORD=$DB_PASSWORD" >> .env
            echo "DB_PORT=$DB_PORT" >> .env
            echo "DB_USERNAME=$DB_USERNAME" >> .env
            echo "HOST=$HOST" >> .env
            composer install
            # ! we don't want to run migrations automatically because it is a potentially destructive action